<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- If these target frameworks are updated, make sure to also update the .psd1 and .nuspec files.-->
    <TargetWindowsVersion>10.0.22000.0</TargetWindowsVersion>
    <CoreFramework>net6.0-windows$(TargetWindowsVersion)</CoreFramework>
    <DesktopFramework>net48</DesktopFramework>
  </PropertyGroup>

  <PropertyGroup>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <LangVersion>10</LangVersion>
    <BuildOutputDirectory>$(SolutionDir)$(Platform)\$(Configuration)\</BuildOutputDirectory>
    <OutputPath>$(BuildOutputDirectory)$(MSBuildProjectName)</OutputPath>
    <PowerShellModuleOutputDirectory>$(BuildOutputDirectory)PowerShell\Microsoft.WinGet.Client</PowerShellModuleOutputDirectory>
    <PowerShellModuleLibDirectory>$(PowerShellModuleOutputDirectory)\lib</PowerShellModuleLibDirectory>
    <Platforms>x64;x86;ARM64</Platforms>
    <TargetFrameworks>$(CoreFramework);$(DesktopFramework)</TargetFrameworks>
    <DocumentationFile>$(OutputPath)\Microsoft.WinGet.Client.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(UseProdCLSIDs)' == 'true'">
    <DefineConstants>USE_PROD_CLSIDS</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <AdditionalFiles Include="..\..\stylecop.json" Link="stylecop.json" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Octokit" Version="4.0.3" />
    <PackageReference Include="PowerShellStandard.Library" Version="5.1.1" PrivateAssets="all" />
    <PackageReference Include="StyleCop.Analyzers" Version="1.1.118">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="System.Security.Principal.Windows" Version="5.0.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.2" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Microsoft.Management.Deployment\Microsoft.Management.Deployment.vcxproj">
      <OutputItemType>Content</OutputItemType>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </ProjectReference>
    <ProjectReference Include="..\..\Xlang\UndockedRegFreeWinRT\src\UndockedRegFreeWinRT\UndockedRegFreeWinRT\UndockedRegFreeWinRT.vcxproj">
      <OutputItemType>Content</OutputItemType>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </ProjectReference>
    <ProjectReference Include="..\..\Microsoft.Management.Deployment.InProc\Microsoft.Management.Deployment.InProc.vcxproj">
      <OutputItemType>Content</OutputItemType>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </ProjectReference>
    <ProjectReference Include="..\..\WindowsPackageManager\WindowsPackageManager.vcxproj">
      <OutputItemType>Content</OutputItemType>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </ProjectReference>
  </ItemGroup>

  <PropertyGroup>
    <!-- Disable warning for CS1591 because auto generated Microsoft.Management.Deployment -->
    <!-- For our code, we still have stylecops acting on it. -->
    <NoWarn>1591</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == '$(CoreFramework)'">
    <RuntimeIdentifiers>win-x64;win-x86;win-arm;win-arm64</RuntimeIdentifiers>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Platform)' == 'x64' AND '$(TargetFramework)' == '$(CoreFramework)'">
    <RuntimeIdentifier>win-x64</RuntimeIdentifier>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Platform)' == 'x86' ">
    <RuntimeIdentifier>win-x86</RuntimeIdentifier>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Platform)' == 'arm' ">
    <RuntimeIdentifier>win-arm</RuntimeIdentifier>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Platform)' == 'arm64' ">
    <RuntimeIdentifier>win-arm64</RuntimeIdentifier>
  </PropertyGroup>

  <ItemGroup Condition="'$(TargetFramework)' == '$(CoreFramework)'">
    <PackageReference Include="Microsoft.Windows.CsWinRT" Version="1.6.5" />
    <PackageReference Include="Microsoft.PowerShell.SDK" Version="7.2.8" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == '$(DesktopFramework)'">
    <PackageReference Include="Microsoft.Windows.SDK.Contracts" Version="10.0.22000.196" PrivateAssets="all" />
    <PackageReference Include="Microsoft.PowerShell.5.1.ReferenceAssemblies" Version="1.0.0" />
  </ItemGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == '$(DesktopFramework)'">
    <DefineConstants>POWERSHELL_WINDOWS</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <Compile Update="Properties\Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == '$(CoreFramework)'">
    <CsWinRTIncludes>Microsoft.Management.Deployment</CsWinRTIncludes>
    <CsWinRTWindowsMetadata>$(TargetWindowsVersion)</CsWinRTWindowsMetadata>
    <!-- Ensure Support for Windows 10, Version 1809 -->
    <TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
  </PropertyGroup>

  <!-- Copy WinRTAct.dll to PowerShell module directory. Relative path to $(OutputPath) used to support AppInstaller build. -->
  <Target Name="CopyWinRTAct" AfterTargets="AfterBuild" Condition="'$(Platform)' != 'ARM' AND '$(TargetFramework)' == '$(CoreFramework)'">
      <PropertyGroup>
          <WinRTActDir>$(OutputPath)..\..\..\UndockedRegFreeWinRT\</WinRTActDir>
          <!-- The output path for this project is different on some builds where the RIDs are not used in the output. -->
          <WinRTActDir Condition="!Exists('$(WinRTActDir)winrtact.dll')">$(OutputPath)..\..\UndockedRegFreeWinRT\</WinRTActDir>
      </PropertyGroup>
      <ItemGroup>
          <WinRTActDll Include="$(WinRTActDir)winrtact.dll" />
      </ItemGroup>
      <Message Importance="high" Text="Copying '@(WinRTActDll)'" />
      <Copy SourceFiles="@(WinRTActDll)" DestinationFolder="$(OutputPath)" />
      <Copy SourceFiles="@(WinRTActDll)" DestinationFolder="$(PowerShellModuleLibDirectory)\$(CoreFramework)\$(Platform)" />
      <Copy SourceFiles="@(WinRTActDll)" DestinationFolder="$(PowerShellModuleLibDirectory)\$(DesktopFramework)\$(Platform)" />
  </Target>

  <!-- Build Microsoft.Winget.Client PowerShell Module -->
  <Target Name="CopyModuleFiles" AfterTargets="AfterBuild">
    <ItemGroup>
      <ModuleFiles Include="$(ProjectDir)\Module\**\*.*" />
    </ItemGroup>
    <Message Importance="high" Text="Copying PowerShell module files to '$(PowerShellModuleOutputDirectory)'" />
    <Copy SourceFiles="@(ModuleFiles)" DestinationFiles="$(PowerShellModuleOutputDirectory)\%(RecursiveDir)%(Filename)%(Extension)" />
  </Target>

  <Target Name="CopyCoreBinaries" AfterTargets="AfterBuild" Condition="'$(TargetFramework)' == '$(CoreFramework)'">
    <ItemGroup>
      <!-- Non-Windows runtime binaries need to be explicitly excluded when building the PowerShell module.-->
      <CoreBinaries Include="$(OutputPath)\**\*.*" Exclude="$(OutputPath)\runtimes\**" />
      <WindowsRuntime Include="$(OutputPath)\runtimes\win10*\**\*.*" />
    </ItemGroup>
    <Message Importance="high" Text="Copying @(CoreBinaries) to '$(PowerShellModuleLibDirectory)\$(CoreFramework)\$(Platform)'" />
    <Copy SourceFiles="@(CoreBinaries)" DestinationFolder="$(PowerShellModuleLibDirectory)\$(CoreFramework)\$(Platform)\%(RecursiveDir)" />
    <Copy SourceFiles="@(WindowsRuntime)" DestinationFolder="$(PowerShellModuleLibDirectory)\$(CoreFramework)\$(Platform)\runtimes\%(RecursiveDir)" />
  </Target>

  <Target Name="CopyDesktopBinaries" AfterTargets="AfterBuild" Condition="'$(TargetFramework)' == '$(DesktopFramework)'">
    <ItemGroup>
      <DesktopBinaries Include="$(OutputPath)\**\*.*" />
    </ItemGroup>
    <Message Importance="high" Text="Copying @(DesktopBinaries) to '$(PowerShellModuleLibDirectory)\$(DesktopFramework)\$(Platform)\Desktop'" />
    <Copy SourceFiles="@(DesktopBinaries)" DestinationFolder="$(PowerShellModuleLibDirectory)\$(DesktopFramework)\$(Platform)\%(RecursiveDir)" />
  </Target>

  <!-- Rename Microsoft.Management.Deployment.InProc.dll to Microsoft.Management.Deployment.dll -->
  <Target Name="RenameMicrosoftManagementDeployment" AfterTargets="AfterBuild">
    <ItemGroup>
      <RenameModuleFiles Include="$(PowerShellModuleLibDirectory)\**\Microsoft.Management.Deployment.InProc.dll">
        <NewName>Microsoft.Management.Deployment.dll</NewName>
      </RenameModuleFiles>
    </ItemGroup>
    <Message Importance="high" Text="Renaming file '%(RenameModuleFiles.Identity)' to '$(PowerShellModuleLibDirectory)\%(RenameModuleFiles.RecursiveDir)\%(RenameModuleFiles.NewName)'" />
    <Move SourceFiles="%(RenameModuleFiles.Identity)" DestinationFiles="$(PowerShellModuleLibDirectory)\%(RenameModuleFiles.RecursiveDir)\%(RenameModuleFiles.NewName)" />
  </Target>

</Project>
