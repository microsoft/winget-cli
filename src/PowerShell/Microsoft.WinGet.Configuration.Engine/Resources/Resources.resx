<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfigurationFieldInvalidType" xml:space="preserve">
    <value>The field '{0}' in the configuration file is the wrong type.</value>
    <comment>{Locked="{0}"} An error in reading a configuration file. {0} is a placeholder replaced by the field name from the file.</comment>
  </data>
  <data name="ConfigurationFileArgumentDescription" xml:space="preserve">
    <value>The path to the configuration file.</value>
  </data>
  <data name="ConfigurationFileInvalid" xml:space="preserve">
    <value>The configuration file is invalid.</value>
  </data>
  <data name="ConfigurationFileVersionUnknown" xml:space="preserve">
    <value>Configuration file version {0} is not known.</value>
    <comment>{Locked="{0}"} An error in reading a configuration file. {0} is a placeholder replaced by the version of the configuration file.</comment>
  </data>
  <data name="ConfigurationAcceptWarningArgumentDescription" xml:space="preserve">
    <value>Accepts the configuration warning, preventing an interactive prompt</value>
  </data>
  <data name="ConfigurationApply" xml:space="preserve">
    <value>Apply</value>
    <comment>Indicates that this item is used to write state</comment>
  </data>
  <data name="ConfigurationAssert" xml:space="preserve">
    <value>Assert</value>
    <comment>Indicates that this item is used to check/assert the state rather than write to it</comment>
  </data>
  <data name="ConfigurationDependencies" xml:space="preserve">
    <value>Dependencies:{0}</value>
    <comment>{Locked="{0}"} Label displaying a list of dependencies. {0} is replaced with a space separated list of identifiers referencing other items.</comment>
  </data>
  <data name="ConfigurationFailedToApply" xml:space="preserve">
    <value>Some of the configuration was not applied successfully.</value>
  </data>
  <data name="ConfigurationFailedToGetDetails" xml:space="preserve">
    <value>Failed to get detailed information about the configuration.</value>
  </data>
  <data name="ConfigurationInform" xml:space="preserve">
    <value>Inform</value>
    <comment>Indicates that this item is used to retrieve values for future use rather than writing them</comment>
  </data>
  <data name="ConfigurationLocal" xml:space="preserve">
    <value>Local</value>
    <comment>Used to indicate that the item is present on the device.</comment>
  </data>
  <data name="ConfigurationModuleNameOnly" xml:space="preserve">
    <value>Module: {0}</value>
    <comment>{Locked="{0}"} Label displaying a module name. {0} is replaced with the name of the module from the user input file.</comment>
  </data>
  <data name="ConfigurationModuleWithDetails" xml:space="preserve">
    <value>Module: {0} by {1} [{2}]</value>
    <comment>{Locked="{0}","{1}","{2}"} Label displaying module information. {0} is replaced by the module name. {1} is replaced by the module author. {2} is replaced by a string indicating the source of the module.</comment>
  </data>
  <data name="ConfigurationSettings" xml:space="preserve">
    <value>Settings:</value>
    <comment>Label for the values that are used as inputs for this item when applying state</comment>
  </data>
  <data name="ConfigurationSuccessfullyApplied" xml:space="preserve">
    <value>Configuration successfully applied.</value>
  </data>
  <data name="ConfigurationWaitingOnAnother" xml:space="preserve">
    <value>Another configuration is being applied to the system. This configuration will continue as soon as is possible...</value>
  </data>
  <data name="ConfigurationWarning" xml:space="preserve">
    <value>You are responsible for understanding the configuration settings you are choosing to execute. Microsoft is not responsible for the configuration file you have authored or imported. This configuration may change settings in Windows, install software, change software settings (including security settings), and accept user agreements to third-party packages and services on your behalf.  By running this configuration file, you acknowledge that you understand and agree to these resources and settings. Any applications installed are licensed to you by their owners. Microsoft is not responsible for, nor does it grant any licenses to, third-party packages or services.</value>
    <comment>Legal approved. Do not change without approval.</comment>
  </data>
  <data name="ConfigurationWarningPromptApply" xml:space="preserve">
    <value>Have you reviewed the configuration and would you like to proceed applying it to the system?</value>
    <comment>PM approved.</comment>
  </data>
  <data name="ConfigurationFileEmpty" xml:space="preserve">
    <value>The configuration is empty.</value>
  </data>
  <data name="ConfigurationDescriptionWasTruncated" xml:space="preserve">
    <value>&lt;See the log file for additional details&gt;</value>
    <comment>The brackets are intended to make the value stand out from other text which it will follow. Any locale appropriate mechanism that achieves this is acceptable.</comment>
  </data>
  <data name="ConfigurationGettingDetails" xml:space="preserve">
    <value>Retrieving configuration details</value>
  </data>
  <data name="ConfigurationInitializing" xml:space="preserve">
    <value>Initializing configuration system</value>
  </data>
  <data name="ConfigurationReadingConfigFile" xml:space="preserve">
    <value>Reading configuration file</value>
  </data>
  <data name="ConfigurationUnitAssertHadNegativeResult" xml:space="preserve">
    <value>The system is not in the desired state asserted by the configuration.</value>
  </data>
  <data name="ConfigurationUnitFailed" xml:space="preserve">
    <value>This configuration unit failed for an unknown reason: {0}</value>
    <comment>{Locked="{0}"} {0} is a placeholder for the unrecognized error code.</comment>
  </data>
  <data name="ConfigurationUnitFailedConfigSet" xml:space="preserve">
    <value>The configuration unit failed due to the configuration: {0}</value>
    <comment>{Locked="{0}"} {0} is a placeholder for the unrecognized error code.</comment>
  </data>
  <data name="ConfigurationUnitFailedDuringGet" xml:space="preserve">
    <value>The configuration unit failed while attempting to get the current system state.</value>
  </data>
  <data name="ConfigurationUnitFailedDuringSet" xml:space="preserve">
    <value>The configuration unit failed while attempting to apply the desired state.</value>
  </data>
  <data name="ConfigurationUnitFailedDuringTest" xml:space="preserve">
    <value>The configuration unit failed while attempting to test the current system state.</value>
  </data>
  <data name="ConfigurationUnitFailedInternal" xml:space="preserve">
    <value>The configuration unit failed due to an internal error: {0}</value>
    <comment>{Locked="{0}"} {0} is a placeholder for the unrecognized error code.</comment>
  </data>
  <data name="ConfigurationUnitFailedPrecondition" xml:space="preserve">
    <value>The configuration unit failed due to a precondition not being valid: {0}</value>
    <comment>{Locked="{0}"} {0} is a placeholder for the unrecognized error code.</comment>
  </data>
  <data name="ConfigurationUnitFailedSystemState" xml:space="preserve">
    <value>The configuration unit failed due to the system state: {0}</value>
    <comment>{Locked="{0}"} {0} is a placeholder for the unrecognized error code.</comment>
  </data>
  <data name="ConfigurationUnitFailedUnitProcessing" xml:space="preserve">
    <value>The configuration unit failed while attempting to run: {0}</value>
    <comment>{Locked="{0}"} {0} is a placeholder for the unrecognized error code.</comment>
  </data>
  <data name="ConfigurationUnitHasDuplicateIdentifier" xml:space="preserve">
    <value>The configuration contains the identifier `{0}` multiple times.</value>
    <comment>{Locked="{0}"} {0} is a placeholder that is replaced by the identifier string from the user input file.</comment>
  </data>
  <data name="ConfigurationUnitHasMissingDependency" xml:space="preserve">
    <value>The dependency `{0}` was not found within the configuration.</value>
    <comment>{Locked="{0}"} {0} is a placeholder that is replaced by the identifier string from the user input file.</comment>
  </data>
  <data name="ConfigurationUnitManuallySkipped" xml:space="preserve">
    <value>This configuration unit was manually skipped.</value>
  </data>
  <data name="ConfigurationUnitModuleConflict" xml:space="preserve">
    <value>The module for the configuration unit is available in multiple locations with the same version.</value>
  </data>
  <data name="ConfigurationUnitModuleImportFailed" xml:space="preserve">
    <value>Loading the module for the configuration unit failed.</value>
  </data>
  <data name="ConfigurationUnitMultipleMatches" xml:space="preserve">
    <value>Multiple matches were found for the configuration unit; specify the module to select the correct one.</value>
  </data>
  <data name="ConfigurationUnitNotFound" xml:space="preserve">
    <value>The configuration unit could not be found.</value>
  </data>
  <data name="ConfigurationUnitNotFoundInModule" xml:space="preserve">
    <value>The configuration unit was not in the module as expected.</value>
  </data>
  <data name="ConfigurationUnitNotRunDueToDependency" xml:space="preserve">
    <value>This configuration unit was not run because a dependency failed or was not run.</value>
  </data>
  <data name="ConfigurationUnitNotRunDueToFailedAssert" xml:space="preserve">
    <value>This configuration unit was not run because an assert failed or was false.</value>
  </data>
  <data name="ConfigurationUnitReturnedInvalidResult" xml:space="preserve">
    <value>The configuration unit returned an unexpected result during execution.</value>
  </data>
  <data name="ConfigurationUnitSkipped" xml:space="preserve">
    <value>This configuration unit was not run for an unknown reason: {0}</value>
    <comment>{Locked="{0}"} {0} is a placeholder for the unrecognized error code.</comment>
  </data>
  <data name="ConfigurationFieldInvalidValue" xml:space="preserve">
    <value>The field '{0}' has an invalid value: {1}</value>
    <comment>{Locked="{0}","{1}"} An error in reading a configuration file. {0} is a placeholder replaced by the field name from the file. {1} is a placeholder for the invalid value.</comment>
  </data>
  <data name="ConfigurationFieldMissing" xml:space="preserve">
    <value>The field '{0}' is missing or empty.</value>
    <comment>{Locked="{0}"} An error in reading a configuration file. {0} is a placeholder replaced by the expected field name from the file.</comment>
  </data>
  <data name="SeeLineAndColumn" xml:space="preserve">
    <value>See line {0}, column {1} in the file.</value>
    <comment>{Locked="{0}","{1}"} Indicates the file location of the error, {0} and {1} are placeholders for numbers of the line and column, respectively.</comment>
  </data>
  <data name="OperationCompleted" xml:space="preserve">
    <value>Completed</value>
  </data>
  <data name="OperationInProgress" xml:space="preserve">
    <value>In progress</value>
  </data>
  <data name="DebugNotSupported" xml:space="preserve">
    <value>Debug parameter not supported</value>
  </data>
  <data name="ConfigurationAllUsersElevated" xml:space="preserve">
    <value>`-ModulePath AllUsers` require administrator privileges to execute.</value>
    <comment>{Locked="-ModulePath AllUsers"}</comment>
  </data>
  <data name="ConfigurationModulePathArgError" xml:space="preserve">
    <value>`-ModulePath` value must be `CurrentUser`, `AllUsers`, `Default` or an absolute path.</value>
    <comment>{Locked="{-ModulePath}, {CurrentUser}, {AllUsers}, {Default}}</comment>
  </data>
  <data name="ConfigurationWarningPromptTest" xml:space="preserve">
    <value>Have you reviewed the configuration and would you like to proceed verifying it against the system?</value>
  </data>
</root>