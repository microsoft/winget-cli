// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
#pragma once
#include <string>
#include <winrt/Windows.ApplicationModel.Resources.h>


namespace AppInstaller::CLI::Resource
{
    using namespace std::string_view_literals;

#define WINGET_WIDE_STRINGIFY_HELP(_id_) L ## _id_
#define WINGET_WIDE_STRINGIFY(_id_) WINGET_WIDE_STRINGIFY_HELP(_id_)
#define WINGET_DEFINE_RESOURCE_ID(_id_) static constexpr Id _id_ = WINGET_WIDE_STRINGIFY(#_id_) ## sv

    // A resource identifier
    struct Id : public std::wstring_view
    {
        constexpr Id(std::wstring_view id) : std::wstring_view(id) {}
    };

    // Resource string identifiers.
    // This list can easily be generated by the following PowerShell:
    //  > [xml]$res = Get-Content <winget.resw file path>
    //  > $res.root.data.name | % { "WINGET_DEFINE_RESOURCE_ID($_);" }
    struct String
    {
        WINGET_DEFINE_RESOURCE_ID(AdjoinedNotFlagError);
        WINGET_DEFINE_RESOURCE_ID(AdjoinedNotFoundError);
        WINGET_DEFINE_RESOURCE_ID(AvailableArguements);
        WINGET_DEFINE_RESOURCE_ID(AvailableCommands);
        WINGET_DEFINE_RESOURCE_ID(AvailableOptions);
        WINGET_DEFINE_RESOURCE_ID(AvailableSubcommands);
        WINGET_DEFINE_RESOURCE_ID(ChannelArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(CommandArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(CountArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(ExactArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(ExtraPositionalError);
        WINGET_DEFINE_RESOURCE_ID(FileArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(FlagContainAdjoinedError);
        WINGET_DEFINE_RESOURCE_ID(ForceArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(HashCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(HashCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(HelpArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(HelpForDetails);
        WINGET_DEFINE_RESOURCE_ID(HelpLinkPreamble);
        WINGET_DEFINE_RESOURCE_ID(IdArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(InstallCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(InstallCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(InteractiveArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(InvalidAliasError);
        WINGET_DEFINE_RESOURCE_ID(InvalidArgumentSpecifierError);
        WINGET_DEFINE_RESOURCE_ID(InvalidNameError);
        WINGET_DEFINE_RESOURCE_ID(LanguageArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(LocationArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(LogArgumentDesciption);
        WINGET_DEFINE_RESOURCE_ID(ManifestArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(MissingArgumentError);
        WINGET_DEFINE_RESOURCE_ID(MonikerArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(MsixArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(NameArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(NoVTArguementDescription);
        WINGET_DEFINE_RESOURCE_ID(OverrideArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(PendingWorkError);
        WINGET_DEFINE_RESOURCE_ID(PlainArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(PreviewVersion);
        WINGET_DEFINE_RESOURCE_ID(QueryArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(RainbowArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(RequiredArgError);
        WINGET_DEFINE_RESOURCE_ID(SearchCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(SearchCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(ShowCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(ShowCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(SilentArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(SingleCharAfterDashError);
        WINGET_DEFINE_RESOURCE_ID(SourceAddCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceAddCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceArgArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceListCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceListCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceNameArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceRemoveCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceRemoveCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceResetCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceResetCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceTypeArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceUpdateCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(SourceUpdateCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(TagArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(ToolDescription);
        WINGET_DEFINE_RESOURCE_ID(ToolInfoArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(ToolVersionArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(TooManyArgError);
        WINGET_DEFINE_RESOURCE_ID(TooManyBehaviorsError);
        WINGET_DEFINE_RESOURCE_ID(UnrecognizedCommand);
        WINGET_DEFINE_RESOURCE_ID(ValidateCommandLongDescription);
        WINGET_DEFINE_RESOURCE_ID(ValidateCommandShortDescription);
        WINGET_DEFINE_RESOURCE_ID(ValidateManifestArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(VerboseLogsArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(VersionArgumentDescription);
        WINGET_DEFINE_RESOURCE_ID(VersionsArgumentDescription);
    };

    // A localized string
    struct LocString
    {
        LocString() = default;

        LocString(Id id);

        LocString(const LocString&) = default;
        LocString& operator=(const LocString&) = default;

        LocString(LocString&&) = default;
        LocString& operator=(LocString&&) = default;

        const std::string& get() const { return m_value; }

    private:
        std::string m_value;
    };

    // Utility class to load resources
    class Loader
    {
    public:
        // Gets the singleton instance of the resource loader.
        static const Loader& Instance();

        // Gets the the string resource value.
        std::string ResolveString(std::wstring_view resKey) const;

    private:
        winrt::Windows::ApplicationModel::Resources::ResourceLoader m_wingetLoader;

        Loader();
    };
}