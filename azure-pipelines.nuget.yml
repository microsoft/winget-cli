trigger: none

parameters:
  - name: version
    displayName: Version to stamp on binaries and nuget package
    type: string

pool:
  vmImage: "windows-latest"

variables:
  solution: "src/AppInstallerCLI.sln"
  buildConfiguration: "Release"
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

jobs:
  - job: "Build"
    variables:
      BuildVer: $[counter(${{ parameters.version }}, 1)]
      version: ${{ parameters.version }}.$(BuildVer)
    steps:
      - script: echo $(version)

      - task: NuGetToolInstaller@1
        displayName: Install Nuget

      - task: NuGetCommand@2
        displayName: Restore Packages
        inputs:
          restoreSolution: "$(solution)"

      - task: DotNetCoreCLI@2
        displayName: DotNet Restore
        inputs:
          command: "restore"
          projects: "**/*.csproj"

      - task: PowerShell@2
        displayName: Update Binary Version
        condition: not(eq(variables['Build.Reason'], 'PullRequest'))
        inputs:
          filePath: 'src\binver\Update-BinVer.ps1'
          arguments: '-TargetFile binver\binver\version.h -BuildVersion $(BuildVer) -MajorMinorOverride ${{ parameters.version }}'
          workingDirectory: "src"

      # - task: VSBuild@1
      #   displayName: Build Solution x86
      #   inputs:
      #     platform: "x86"
      #     solution: "$(solution)"
      #     configuration: "$(buildConfiguration)"

      - task: VSBuild@1
        displayName: Build Solution x64
        inputs:
          platform: "x64"
          solution: "$(solution)"
          configuration: "$(buildConfiguration)"

      - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
        displayName: "ESRP CodeSigning - Package contents"
        inputs:
          ConnectedServiceName: "Peet ESRP CodeSigning"
          FolderPath: "$(Build.SourcesDirectory)"
          Pattern: |
            **/WinGetUtil.dll
          signConfigType: inlineSignParams
          inlineOperation: |
            [
              {
                  "KeyCode" : "CP-230012",
                  "OperationCode" : "SigntoolSign",
                  "Parameters" : {
                      "OpusName" : "Microsoft",
                      "OpusInfo" : "http://www.microsoft.com",
                      "FileDigest" : "/fd \"SHA256\"",
                      "PageHash" : "/NPH",
                      "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                  },
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              },
              {
                  "KeyCode" : "CP-230012",
                  "OperationCode" : "SigntoolVerify",
                  "Parameters" : {},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              }
            ]

      - task: PublishBuildArtifacts@1
        displayName: Publish Util Binary x64
        inputs:
          PathtoPublish: 'src\x64\Release\WinGetUtil\WinGetUtil.dll'
          ArtifactName: "WinGetUtil.dll_x64"
          publishLocation: "Container"

      # - task: PublishBuildArtifacts@1
      #   displayName: Publish Util Binary x86
      #   inputs:
      #     PathtoPublish: 'src\x86\Release\WinGetUtil\WinGetUtil.dll'
      #     ArtifactName: "WinGetUtil.dll_x86"
      #     publishLocation: "Container"

      # - task: PublishBuildArtifacts@1
      #   displayName: Publish Util Symbols x64
      #   inputs:
      #     PathtoPublish: 'src\x64\Release\WinGetUtil\WinGetUtil.pdb'
      #     ArtifactName: "WinGetUtil.pdb_x64"
      #     publishLocation: "Container"

      # - task: PublishBuildArtifacts@1
      #   displayName: Publish Util Symbols x86
      #   inputs:
      #     PathtoPublish: 'src\x86\Release\WinGetUtil\WinGetUtil.pdb'
      #     ArtifactName: "WinGetUtil.pdb_x86"
      #     publishLocation: "Container"

      - task: NuGetCommand@2
        displayName: Pack WingetUtil nuget package
        inputs:
          command: pack
          packagesToPack: WinGetUtil.nuspec
          versioningScheme: byEnvVar
          versionEnvVar: version
          packDestination: "$(Build.ArtifactStagingDirectory)"

      - task: PublishBuildArtifacts@1
        displayName: Publish nuget package to artifacts
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\Microsoft.Packaging.WinGetUtil.*.nupkg'
          ArtifactName: "Microsoft.Packaging.WinGetUtil"
          publishLocation: "Container"
