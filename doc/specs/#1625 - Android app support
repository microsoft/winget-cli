---
author: @upintheairsheep
created on: 2023-05-23
last updated: 2023-05-23
issue id: 1625
---

# Spec Title

For [#1625](https://github.com/microsoft/winget-cli/issues/1625)

## Abstract

This feature adds Android application support to winget via Windows Subsystem for Android. The goal is to allow users to install and maintain Android applications just like they would any other type of application on winget, and for more community-driven Android apps to be availble via Windows. As a first step, this would be available as an "experimental" feature to make it available to the community and receive feedback.

## Inspiration

Android is by far the most used operating system on the planet, excluding a few certain regions, where iOS dominates. Many mobile developers make apps for Android, and only have a sometimes inferior web app for desktop, if they have one at all.

## Solution Design

### System requirements

Windows 11 or newer  
Windows Subsystem for Android
ADB (if it ends up being the method of installation)

### Android YAML manifest

The "InstallerType" field in the YAML manifest file specifies the type of the application. A new InstallerType "Android" or "APK" will be added to show that a given application is an Android app.

Each PWA would have its own manifest YAML file. A sample manifest file would look like this:

```
Id: FDroid.FDroid
Version: 1337.0
Name: F-Droid
Publisher: F-Droid
AppMoniker: fdroid
License: Test
InstallerType: Android
Installers:
- Arch: neutral
  Url: https://f-droid.org/F-Droid.apk
  InstallerType: Android
  MinAndroidPlat: 31
  ADBFlags: 
ManifestVersion: 0.1.0
```

### Package generation

WinGetCreate will download the package and extract metadata from AndroidManifest.xml, automatically filling out all data excluding the short desciption

### Package installation

Either ADB could be used to install the application, or the method that Microsoft Store installs Android apps could be utilized.
### Flow of the install process

1. Windows Subsystem for Android is installed
2. ADB must be installed on the machine
3. It must connect to the Subsystem, bypassing the developer mode restriction, which I think the uninstallation in control panel already has.
A nice feature in the manifest would be for adding the adb install [flags](https://adbshell.com/commands/adb-install) for installation of apps that require it.
## UI/UX Design

Installing a PWA will be similar to installing other application types currently supported by winget, using the install command. The only difference in experience might be if the user passes a -i flag to get a more interactive experience. When this flag is passed, the user will be prompted to allow the PWA to be launched on install. This feature is provided because in order to register a PWA with Edge, it has to be launched once.

An example of the interactive install would look like this:

```
>winget install -i fintimes
Found Financial Times [PWAtest.FinTimes]
This application is licensed to you by its owner.
Microsoft is not responsible for, nor does it grant any licenses to, third-party packages.
Starting package install...
<Progress bar>
Successfully installed! Launching app now. This is a necessary step to complete installation.
(App launches on Edge)
```

## Capabilities

### Accessibility

This should have no direct impact on accessibility.

### Security

No direct impact on security.

### Reliability

This is not expected to impact reliability.

### Compatibility

This is an additional functionality built on top of the existing implementation to allow the install of PWAs. Therefore we don't anticipate any breaking changes to the existing implementation.

### Performance, Power, and Efficiency

## Potential Issues

If the user navigates to the site before launching the installed PWA at least once (i.e. before registration with Edge), Edge might prompt them to install the PWA again.

## Future considerations

1. We are looking into where the catalog of PWAs should exist, and the pros and cons of maintaining a separate catalog vs including PWAs on the existing catalog.
2. We're testing this new integration technology with Edge first in 2020 and hope to have this debugged and contributed to the Chromium project early 2021.
3. Sometimes there may be multiple versions of a PWA available. In such scenarios, we may allow a "force" option in the case where a user wants all of them to be installed.
4. There will be a service developed in the future that updates all the PWA manifests whenever there is a breaking change in Edge or in the web service that generates MSIX packages.

## Resources

Hosted App Model : https://blogs.windows.com/windowsdeveloper/2020/03/19/hosted-app-model/  
Test Website for generating MSIX for PWA : https://pwabuilder-win-chromium-platform.centralus.cloudapp.azure.com/
