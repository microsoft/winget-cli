# Commit triggers
trigger:
- master

# PR triggers
pr:
  branches:
    include:
    - master
  paths:
    include:
    - azure-pipelines.yml
    - src/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'src\AppInstallerCLI.sln'
  appxPackageDir: '$(Build.ArtifactStagingDirectory)/AppxPackages/'

# Do not set the build version for a PR build.

jobs:
- job: 'GetReleaseTag'
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))
  variables:
    runCodesignValidationInjection: ${{ false }}
    skipComponentGovernanceDetection: ${{ true }}
  steps:
  - task: PowerShell@2
    name: 'GetTag'
    displayName: Get Release Tag
    inputs:
      filePath: 'src\binver\Update-BinVer.ps1'
      arguments: '-OutVar'
      workingDirectory: 'src'

- job: 'Build'
  timeoutInMinutes: 120
  dependsOn: 'GetReleaseTag'
  condition: always()

  strategy:
    matrix:
      x86_release:
        buildConfiguration: 'Release'
        buildPlatform: 'x86'
        testBuildConfiguration: 'TestRelease'
      x64_release:
        buildConfiguration: 'Release'
        buildPlatform: 'x64'
        testBuildConfiguration: 'TestRelease'

  variables:
    BuildVer: $[counter(dependencies.GetReleaseTag.outputs['GetTag.tag'], 1)]
    buildOutDir: $(Build.SourcesDirectory)\src\$(buildPlatform)\$(buildConfiguration)
    artifactsDir: $(Build.ArtifactStagingDirectory)\$(buildPlatform)

  steps:
  - task: NuGetToolInstaller@1
    displayName: Install Nuget

  # Restores all projects, including native (vcxproj) projects
  - task: NuGetCommand@2
    displayName: Restore Solution
    inputs:
      restoreSolution: '$(solution)'

  # Restore these UAP packages as https://github.com/NuGet/Home/issues/7796 leads to all UAP packages being skipped for restore.
  # Even though they don't need any actual restore action, they need the project.assets.json file to be created and a direct restore does that.
  - task: NuGetCommand@2
    displayName: Restore AppInstallerCLIPackage
    inputs:
      restoreSolution: 'src\AppInstallerCLIPackage\AppInstallerCLIPackage.wapproj'

  - task: NuGetCommand@2
    displayName: Restore AppInstallerTestMsixInstaller
    inputs:
      restoreSolution: 'src\AppInstallerTestMsixInstaller\AppInstallerTestMsixInstaller.wapproj'

  - task: NuGetCommand@2
    displayName: Restore PackagedTests
    inputs:
      restoreSolution: 'src\PackagedTests\PackagedTests.csproj'

  # Restores only .NET core projects, but is still necessary, as without this the IndexCreationTool and LocalhostWebServer projects fail to build
  - task: DotNetCoreCLI@2
    displayName: DotNet Restore
    inputs:
      command: 'restore'
      projects: '**/*.csproj'

  - task: PowerShell@2
    displayName: Update Binary Version
    condition: not(eq(variables['Build.Reason'], 'PullRequest'))
    inputs:
      filePath: 'src\binver\Update-BinVer.ps1'
      arguments: '-TargetFile binver\binver\version.h -BuildVersion $(BuildVer)'
      workingDirectory: 'src'

  # Build all solutions in the root directory.
  - task: VSBuild@1
    displayName: Build Solution
    inputs:
      platform: '$(buildPlatform)'
      solution: '$(solution)'
      configuration: '$(buildConfiguration)'
      msbuildArgs: '/bl:$(artifactsDir)\msbuild.binlog
                    /p:AppxBundlePlatforms="$(buildPlatform)"
                    /p:AppxPackageDir="$(appxPackageDir)"
                    /p:AppxBundle=Always
                    /p:UapAppxPackageBuildMode=StoreUpload'

  - task: VSBuild@1
    displayName: Build Test Project
    inputs:
      platform: '$(buildPlatform)'
      solution: '$(solution)'
      configuration: '$(testBuildConfiguration)'
      msbuildArgs: '/bl:$(artifactsDir)\msbuild-testProject.binlog
                    /p:AppxBundlePlatforms="$(buildPlatform)"
                    /p:AppxPackageDir="$(appxPackageDir)"
                    /p:AppxBundle=Always
                    /p:UapAppxPackageBuildMode=StoreUpload'

  - task: CopyFiles@2
    displayName: 'Copy WindowsPackageManager.dll Symbols to artifacts folder'
    inputs:
      Contents: '$(buildOutDir)\WindowsPackageManager\WindowsPackageManager.pdb'
      TargetFolder: '$(artifactsDir)'

  - task: PowerShell@2
    displayName: Install Tests Dependencies
    inputs:
      targetType: 'inline'
      script: |
        Add-AppxPackage AppInstallerCLIPackage_0.0.2.0_Test\Dependencies\$(buildPlatform)\Microsoft.VCLibs.$(buildPlatform).14.00.Desktop.appx
      workingDirectory: $(appxPackageDir)

  - task: VisualStudioTestPlatformInstaller@1
    displayName: Prepare VSTest for E2E Tests
    inputs:
      packageFeedSelector: 'nugetOrg'

  - task: DownloadSecureFile@1
    name: PsExec
    displayName: 'Download PsExec.exe'
    inputs:
      secureFile: 'PsExec.exe'

  - task: CmdLine@2
    displayName: Run Unit Tests Unpackaged Under System Context
    inputs:
      script: |
        $(PsExec.secureFilePath) -accepteula -s -i $(buildOutDir)\AppInstallerCLITests\AppInstallerCLITests.exe -logto $(artifactsDir)\AICLI-Unpackaged-System.log -s -r junit -o $(artifactsDir)\TEST-AppInstallerCLI-Unpackaged-System.xml
      workingDirectory: '$(buildOutDir)\AppInstallerCLITests'
    continueOnError: true

  - task: PowerShell@2
    displayName: Run Unit Tests Packaged
    inputs:
      filePath: 'src\AppInstallerCLITests\Run-TestsInPackage.ps1'
      arguments: '-Args "~[pips]" -BuildRoot $(buildOutDir) -PackageRoot AppInstallerCLIPackage\bin\$(buildPlatform)\$(buildConfiguration) -LogTarget $(artifactsDir)\AICLI-Packaged.log -TestResultsTarget $(artifactsDir)\TEST-AppInstallerCLI-Packaged.xml -ScriptWait'
      workingDirectory: 'src'
    continueOnError: true

  - task: PublishTestResults@2
    displayName: Publish Unit Test Results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(artifactsDir)\TEST-*.xml'
      failTaskOnFailedTests: true

  - task: DownloadSecureFile@1
    name: AppInstallerTest
    displayName: 'Download Source Package Certificate'
    inputs:
      secureFile: 'AppInstallerTest.pfx'

  - task: DownloadSecureFile@1
    name: HTTPSDevCert
    displayName: 'Download Kestrel Certificate'
    inputs:
      secureFile: 'HTTPSDevCertV2.pfx'

  - task: MSBuild@1
    displayName: Build MSIX Test Installer File
    inputs:
      platform: '$(buildPlatform)'
      solution: 'src\AppInstallerTestMsixInstaller\AppInstallerTestMsixInstaller.wapproj'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '/p:AppxPackageOutput="$(Build.ArtifactStagingDirectory)\AppInstallerTestMsixInstaller.msix"
                         /p:AppxBundle=Never
                         /p:UapAppxPackageBuildMode=SideLoadOnly
                         /p:AppxPackageSigningEnabled=false'

  - task: PowerShell@2
    displayName: Install Root Certificate
    inputs:
      filePath: 'src\LocalhostWebServer\InstallDevCert.ps1'
      arguments: '-pfxpath $(HTTPSDevCert.secureFilePath) -password microsoft'

  - task: PowerShell@2
    displayName: Launch LocalhostWebServer
    inputs:
      filePath: 'src\LocalhostWebServer\Run-LocalhostWebServer.ps1'
      arguments: '-BuildRoot $(buildOutDir)\LocalhostWebServer -StaticFileRoot $(Agent.TempDirectory)\TestLocalIndex -CertPath $(HTTPSDevCert.secureFilePath) -CertPassword microsoft'

  - task: CopyFiles@2
    displayName: 'Copy Files to Package Output'
    inputs:
      SourceFolder: '$(buildOutDir)\WindowsPackageManager'
      TargetFolder:  'src\AppInstallerCLIPackage\bin\$(buildPlatform)\$(buildConfiguration)'
      Contents: WindowsPackageManager.dll
      CleanTargetFolder: false
      OverWrite: true

  - task: VSTest@2
    displayName: Run E2E Tests Packaged
    inputs:
      testRunTitle: 'E2E Packaged'
      testSelector: 'testAssemblies'
      testAssemblyVer2: '$(buildOutDir)\AppInstallerCLIE2ETests\AppInstallerCLIE2ETests.dll'
      runSettingsFile: '$(buildOutDir)\AppInstallerCLIE2ETests\Test.runsettings'
      overrideTestrunParameters: '-PackagedContext true
                                  -AICLIPackagePath $(System.DefaultWorkingDirectory)\src\AppInstallerCLIPackage\bin\$(buildPlatform)\$(buildConfiguration)
                                  -AICLIPath AppInstallerCLI\winget.exe
                                  -LooseFileRegistration true
                                  -InvokeCommandInDesktopPackage true
                                  -StaticFileRootPath $(Agent.TempDirectory)\TestLocalIndex
                                  -MsixTestInstallerPath $(Build.ArtifactStagingDirectory)\AppInstallerTestMsixInstaller.msix
                                  -ExeTestInstallerPath $(buildOutDir)\AppInstallerTestExeInstaller\AppInstallerTestExeInstaller.exe
                                  -PackageCertificatePath $(AppInstallerTest.secureFilePath)'

  - task: CopyFiles@2
    displayName: 'Copy E2E Tests Package Log to artifacts folder'
    inputs:
      SourceFolder: '$(temp)\E2ETestLogs'
      TargetFolder: '$(artifactsDir)\E2ETestsPackagedLog'

  - task: VSTest@2
    displayName: Run Com Interface Tests
    inputs:
      testRunTitle: 'Com Interface Tests'
      platform: '$(buildPlatform)'
      testSelector: 'testAssemblies'
      testAssemblyVer2: |
        $(buildOutDir)\PackagedTests\PackagedTests.build.appxrecipe
      runSettingsFile: '$(buildOutDir)\PackagedTests\Test.runsettings'

  - task: CopyFiles@2
    displayName: 'Copy Files: WinGetUtilInterop.UnitTests'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\src\WinGetUtilInterop.UnitTests\bin\$(BuildConfiguration)\netcoreapp3.1'
      TargetFolder:  '$(Build.ArtifactStagingDirectory)\WinGetUtilInterop.UnitTests\'
      CleanTargetFolder: true
      OverWrite: true

  - task: VSTest@2
    displayName: 'Run tests: WinGetUtilInterop.UnitTests'
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: 'WinGetUtilInterop.UnitTests.dll'
      searchFolder: '$(Build.ArtifactStagingDirectory)\WinGetUtilInterop.UnitTests'
      codeCoverageEnabled: true
      platform: 'Any CPU'
      configuration: '$(BuildConfiguration)'

  - task: CopyFiles@2
    displayName: 'Copy Util to artifacts folder'
    inputs:
      Contents: '$(buildOutDir)\WinGetUtil\WinGetUtil.dll
                 $(buildOutDir)\WinGetUtil\WinGetUtil.pdb'
      TargetFolder: '$(artifactsDir)'

  - task: PublishPipelineArtifact@1
    displayName: Publish Pipeline Artifacts
    inputs:
      targetPath: '$(artifactsDir)'
    condition: always()

  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Governance
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'

  # Run BimSkim for all the binaries
  - task: BinSkim@3
    displayName: 'Run BinSkim '
    inputs:
      arguments: 'analyze "$(System.DefaultWorkingDirectory)\src\AppInstaller*CLI.exe" "$(System.DefaultWorkingDirectory)\src\WinGet*Util.dll" --config default --recurse'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'
