# Commit triggers
trigger:
- master

# PR triggers
pr:
  branches:
    include:
    - master

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'src/AppInstallerCLI.sln'
  buildPlatform: 'x86|x64|ARM'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

# Do not set the build version for a PR build.

jobs:
- job: 'GetReleaseTag'
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))
  variables:
    runCodesignValidationInjection: ${{ false }}
    skipComponentGovernanceDetection: ${{ true }}
  steps:
  - task: PowerShell@2
    name: 'GetTag'
    displayName: Get Release Tag
    inputs:
      filePath: 'src\binver\Update-BinVer.ps1'
      arguments: '-OutVar'
      workingDirectory: 'src'

- job: 'Build'
  dependsOn: 'GetReleaseTag'
  condition: always()
  variables:
    BuildVer: $[counter(dependencies.GetReleaseTag.outputs['GetTag.tag'], 1)]
  steps:
  - task: NuGetToolInstaller@1
    displayName: Install Nuget
  
  - task: NuGetCommand@2
    displayName: Restore Packages
    inputs:
      restoreSolution: '$(solution)'
  
  - task: PowerShell@2
    displayName: Update Binary Version
    condition: not(eq(variables['Build.Reason'], 'PullRequest'))
    inputs:
      filePath: 'src\binver\Update-BinVer.ps1'
      arguments: '-TargetFile binver\binver\version.h -BuildVersion $(BuildVer)'
      workingDirectory: 'src'
  
  - task: VSBuild@1
    displayName: Build Solution
    inputs:
      platform: 'x86'
      solution: '$(solution)'
      configuration: '$(buildConfiguration)'
      msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload'
  
  - task: CmdLine@2
    displayName: Run Tests Unpackaged
    inputs:
      script: |
        AppInstallerCLITests.exe -logto AICLI-Unpackaged.log -s -r junit -o TEST-AppInstallerCLI-Unpackaged.xml
      workingDirectory: 'src\x64\Release\AppInstallerCLITests\'
  
  - task: PublishBuildArtifacts@1
    displayName: Publish Unpackaged Log
    inputs:
      PathtoPublish: 'src\x64\Release\AppInstallerCLITests\AICLI-Unpackaged.log'
      ArtifactName: 'TestPassUnpackagedLog'
      publishLocation: 'Container'
    condition: succeededOrFailed()
  
  - task: PublishBuildArtifacts@1
    displayName: Publish Unpackaged Output
    inputs:
      PathtoPublish: 'src\x64\Release\AppInstallerCLITests\TEST-AppInstallerCLI-Unpackaged.xml'
      ArtifactName: 'TestPassUnpackagedOutput'
      publishLocation: 'Container'
    condition: succeededOrFailed()
  
  - task: PowerShell@2
    displayName: Install Dependencies
    inputs:
      targetType: 'inline'
      script: |
        Add-AppxPackage AppInstallerCLIPackage_0.0.0.2_Test\Dependencies\x64\Microsoft.VCLibs.x64.14.00.Desktop.appx
      workingDirectory: $(appxPackageDir)
  
  - task: PowerShell@2
    displayName: Run Tests Packaged
    inputs:
      filePath: 'src\AppInstallerCLITests\Run-TestsInPackage.ps1'
      arguments: '-Args "~[pips]" -BuildRoot x64\Release -PackageRoot AppInstallerCLIPackage\bin\x64\Release -LogTarget x64\Release\AICLI-Packaged.log -TestResultsTarget x64\Release\TEST-AppInstallerCLI-Packaged.xml -ScriptWait'
      workingDirectory: 'src'
  
  - task: PublishBuildArtifacts@1
    displayName: Publish Packaged Log
    inputs:
      PathtoPublish: 'src\x64\Release\AICLI-Packaged.log'
      ArtifactName: 'TestPassPackagedLog'
      publishLocation: 'Container'
    condition: succeededOrFailed()
  
  - task: PublishBuildArtifacts@1
    displayName: Publish Packaged Output
    inputs:
      PathtoPublish: 'src\x64\Release\TEST-AppInstallerCLI-Packaged.xml'
      ArtifactName: 'TestPassPackagedOutput'
      publishLocation: 'Container'
    condition: succeededOrFailed()
  
  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/TEST-*.xml'
      failTaskOnFailedTests: true
    condition: succeededOrFailed()
  
  - task: PublishBuildArtifacts@1
    displayName: Publish CLI Binary
    inputs:
      PathtoPublish: 'src\x64\Release\AppInstallerCLI\AppInstallerCLI.exe'
      ArtifactName: 'AppInstallerCLI.exe'
      publishLocation: 'Container'
  
  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Governance
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'