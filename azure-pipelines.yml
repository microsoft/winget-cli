# Commit triggers
trigger:
- master

# PR triggers
pr:
  branches:
    include:
    - master
  paths:
    include:
    - azure-pipelines.yml
    - src/*
    - schemas/JSON/manifests/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'src\AppInstallerCLI.sln'
  appxPackageDir: '$(Build.ArtifactStagingDirectory)/AppxPackages/'

# Do not set the build version for a PR build.

jobs:
- job: 'GetReleaseTag'
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))
  variables:
    runCodesignValidationInjection: ${{ false }}
    skipComponentGovernanceDetection: ${{ true }}
  steps:
  - task: PowerShell@2
    name: 'GetTag'
    displayName: Get Release Tag
    inputs:
      filePath: 'src\binver\Update-BinVer.ps1'
      arguments: '-OutVar'
      workingDirectory: 'src'

- job: 'Build'
  timeoutInMinutes: 120
  dependsOn: 'GetReleaseTag'
  condition: always()

  strategy:
    matrix:
      x64_fuzzing:
        buildConfiguration: 'Fuzzing'
        buildPlatform: 'x64'

  variables:
    BuildVer: $[counter(dependencies.GetReleaseTag.outputs['GetTag.tag'], 1)]
    buildOutDir: $(Build.SourcesDirectory)\src\$(buildPlatform)\$(buildConfiguration)
    artifactsDir: $(Build.ArtifactStagingDirectory)\$(buildPlatform)

  steps:
  - task: NuGetToolInstaller@1
    displayName: Install Nuget

  # Restores all projects, including native (vcxproj) projects
  - task: NuGetCommand@2
    displayName: Restore Solution
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1
    displayName: Build Solution
    inputs:
      platform: '$(buildPlatform)'
      solution: '$(solution)'
      configuration: '$(buildConfiguration)'
      msbuildArgs: '/bl:$(artifactsDir)\msbuild.binlog'

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(buildOutDir)'
      Contents: '**'
      TargetFolder: '$(artifactsDir)'

  - task: PublishPipelineArtifact@1
    displayName: Publish Pipeline Artifacts
    inputs:
      targetPath: '$(artifactsDir)'
    condition: succeededOrFailed()

  # - task: onefuzz-task@0
  #   inputs:
  #     onefuzzOSes: 'Windows'
  #   env:
  #     onefuzzDropDirectory: '$(buildOutDir)'
  #     onefuzzDropPAT: $(onefuzzDropPAT)